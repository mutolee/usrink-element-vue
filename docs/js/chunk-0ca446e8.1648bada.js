(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-0ca446e8"],{"54d1":function(n,e,t){"use strict";t.r(e);var o=function(){var n=this,e=n.$createElement,t=n._self._c||e;return n.refresh?t("el-card",{staticClass:"box-card",attrs:{shadow:"never","body-style":{padding:"15px",minHeight:"calc(100vh - 152px)"}}},[t("vel_md_editor",{attrs:{content:"\n### 说明\n\n我是基于 vue-cli 来搭建的项目，目录怎么建，凭自己喜好，结合项目实际情况来，不用和我一样。\n\n### 工程目录\n```\n┌vel-admin-web\n├┈┈pbulic\n├┈┈┈┈static\n├┈┈┈┈┈┈editor.md\n├┈┈┈┈┈┈imgs\n├┈┈┈┈┈┈res\n├┈┈┈┈favicon.ico\n├┈┈┈┈index.html\n├┈┈src\n├┈┈┈┈components\n├┈┈┈┈┈┈aframe\n├┈┈┈┈┈┈┈┈fragment\n├┈┈┈┈┈┈common\n├┈┈┈┈┈┈views\n├┈┈┈┈┈┈index.js\n├┈┈┈┈config\n├┈┈┈┈┈┈api.js\n├┈┈┈┈┈┈constant.js\n├┈┈┈┈router\n├┈┈┈┈┈┈common\n├┈┈┈┈┈┈index.js\n├┈┈┈┈utils\n├┈┈┈┈vuex\n├┈┈┈┈┈┈modules\n├┈┈┈┈┈┈index.js\n└┈┈package.json\n```\n\n### 目录说明及约定\n\n#### pbulic\n目录下面主要放一些静态文件，如图片、css、js、还有一些第三方的包，文件夹最好分门别类。\n模拟的 api 数据在 res 目录下。\n\n#### src\n目录放我们的项目源代码，主要是 .js 和 .vue 的代码。\n\n#### components\n我们写的 vue 组件，全部放在这个文件夹中，根据功能划分，创建各个功能的子文件夹。\n在 components 目录下，我创建了 aframe、common、views 三个文件夹。\n脚手架用到的组件，我都放在了 aframe 中。\ncommon 准备放一些通用的组件，如 vel_md_editor。\nviews 放我们的页面组件，比如你现在看到的 ’项目结构介绍‘ 页面，就在 views 中。\n\n#### config\n主要放一些配置的东西，如常量、接口配置。\n\n#### router\nvue-router 的配置都在该目录下，包括路由的拦截、页面的权限、未登陆的处理、顶部进度条、404等等。\n\n#### utils\n主要是放一些工具函数。\n\n#### vuex\n该目录放 vue 的一些状态，所有的状态均放在该目录下的 modules 中。\n\n#### main.js\n程序的主入口，vue 的实例在这里创建。\n\n#### App.vue\nvue 渲染的根节点 `<div id='app'></div>` 在这个文件中，路由出口也在这里。\n\n\n"}})],1):n._e()},a=[],r=t("bce4"),s={name:"jieshaoView",components:{vel_md_editor:r["a"]}},i=s,c=t("b709"),l=Object(c["a"])(i,o,a,!1,null,"01a4b026",null);e["default"]=l.exports},"6e3f":function(n,e,t){},7529:function(n,e,t){var o={"./views/example/apiguifanView.vue":"e856","./views/example/iframePageView.vue":"db8a","./views/example/jieshaoView.vue":"54d1","./views/example/luyoushuomingView.vue":"db3d","./views/example/markdownView.vue":"faf5","./views/example/qitashuomingView.vue":"d3cb"};function a(n){var e=r(n);return t(e)}function r(n){if(!t.o(o,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return o[n]}a.keys=function(){return Object.keys(o)},a.resolve=r,n.exports=a,a.id="7529"},afcf:function(n,e,t){"use strict";t("6e3f")},d3cb:function(n,e,t){"use strict";t.r(e);var o=function(){var n=this,e=n.$createElement,t=n._self._c||e;return n.refresh?t("el-card",{staticClass:"box-card",attrs:{shadow:"never","body-style":{padding:"15px",minHeight:"calc(100vh - 152px)"}}},[t("vel_md_editor",{attrs:{content:"\n### 其他\n\nvel-admin-web 争取能少用一些 UI 组件，目前只用到了 Vue2、ElementUI2，这样我们也不用去学习各种各种的框架，我们要接活嘛，哪有那个空学习那些五花八门的东西 <font size=5>😒</font>\n\n### 更新迭代\n\n开源，是为了获得更多资源，因为我也不知道有没有人用这个脚手架，后面根据使用情况，搞个群，再结合实际业务，封装一些常用组件，算是升级迭代了，当然，不排除会改改UI，修修Bug之类的。\n\n就先这样吧。\n"}})],1):n._e()},a=[],r=t("bce4"),s={name:"qitashuomingView",components:{vel_md_editor:r["a"]}},i=s,c=t("b709"),l=Object(c["a"])(i,o,a,!1,null,"2ead2500",null);e["default"]=l.exports},db3d:function(n,e,t){"use strict";t.r(e);var o=function(){var n=this,e=n.$createElement,t=n._self._c||e;return n.refresh?t("el-card",{staticClass:"box-card",attrs:{shadow:"never","body-style":{padding:"15px",minHeight:"calc(100vh - 152px)"}}},[t("vel_md_editor",{attrs:{content:"\n\n### 配置\n\n路由的配置在 `router/index.js` 中，主要配置了3个静态的路由组件。\n\n1. 欢迎页\n2. 404 页面\n3. 登陆页面\n\n``` json\n{\n        path: GEN_ROUTER,                      // 根路由\n        name: GEN_ROUTER_NAME,\n        component: vel_main,\n        redirect: WELCOME_ROUTER,              // 默认`/` 重定向到欢迎页面\n        children: [                            // 动态配置的路由都将挂载到根路由(`/`)的 children 下\n            {\n                path: WELCOME_ROUTER,\n                component: welcome\n            },\n            {\n                path: NOT_FOUND_ROUTER,\n                component: notfound            // 请求不属于用户菜单的路由时候，在二级路由视图展示 404 页面\n            }\n        ]\n},\n// 未登陆跳转页面\n{path: LOGIN_ROUTER, component: vel_login}\n```\n\n### 路由拦截\n\n路由拦截器的配置在 `router/common/intercept.js` 中，逻辑处理如下：\n\n![router](/static/imgs/router.png)\n\n\n\n\n\n"}})],1):n._e()},a=[],r=t("bce4"),s={name:"luyoushuomingView",components:{vel_md_editor:r["a"]}},i=s,c=t("b709"),l=Object(c["a"])(i,o,a,!1,null,"110e087c",null);e["default"]=l.exports},db8a:function(n,e,t){"use strict";t.r(e);var o=function(){var n=this,e=n.$createElement,t=n._self._c||e;return n.refresh?t("el-card",{staticClass:"box-card",attrs:{shadow:"never","body-style":{padding:"1px",height:"calc(100vh - 124px)"}}},[t("vel_iframe",{attrs:{url:"http://localhost:8080/#/welcome"}})],1):n._e()},a=[],r=function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("iframe",{attrs:{src:n.url,frameborder:"0",width:"100%",height:"100%"}})},s=[],i={name:"vel_iframe",props:{url:{type:String,default:""}}},c=i,l=(t("afcf"),t("b709")),u=Object(l["a"])(c,r,s,!1,null,"216603e0",null),d=u.exports,f={name:"iframePageView",components:{vel_iframe:d}},m=f,p=Object(l["a"])(m,o,a,!1,null,"7c26b0e8",null);e["default"]=p.exports},e856:function(n,e,t){"use strict";t.r(e);var o=function(){var n=this,e=n.$createElement,t=n._self._c||e;return n.refresh?t("el-card",{staticClass:"box-card",attrs:{shadow:"never","body-style":{padding:"15px",minHeight:"calc(100vh - 152px)"}}},[t("vel_md_editor",{attrs:{content:'\n### 说明\n\nhttp 请求使用 axios 进行的封装，详细配置在 `utils/httpUtil.js` 中，只做了 get、post 的封装，可自行拓展。\n\n### 拦截器\n\n##### 在请求前进行拦截，主要做的功能是前端验证登陆状态及携带 Token 参数。\n\n``` js\naxios.interceptors.request.use(function (config) {\n    // 在发送请求之前做些什么\n    if (config.url.indexOf(LOGIN_API) == -1) {\n        // 如果不是登录请求，需要验证登录是否过期\n        if (isLogin()) {\n            // 请求携带 Token 参数\n            let token = cookieUtil.get(TOKEN)\n            if (config.method.toLowerCase() === "get") {\n                if (!config.params) {\n                    config.params = {}\n                }\n                config.params.token = token\n            } else {\n                if (!config.data) {\n                    config.data = {}\n                } else {\n                    config.data = qs.parse(config.data)\n                }\n                config.data.token = token\n                config.data = qs.stringify(config.data)\n            }\n        } else {\n            logout()\n        }\n    }\n    return config;\n}\n```\n\n##### 对全局响应的拦截，主要根据返回的状态码，如服务端登陆失效、权限不足的业务处理。\n\n``` js\n// 添加响应拦截器\naxios.interceptors.response.use(function (response) {\n    // 对响应数据做点什么\n    let res = response.data;\n    if (res.statusCode === STATUS_CODE.NO_LOGIN) {\n        // 服务器返回未登陆，跳转登录页面\n        logout()\n    } else if (res.statusCode === STATUS_CODE.NO_PERM) {\n        Message.warning("没有权限，请联系管理员！")\n    }\n    return response;\n}, function (error) {\n    // 对响应错误做点什么\n    return Promise.reject(error);\n});\n```\n\n### API 配置\n\napi 接口的配置，我放在了 `config/api.js` 中，因为脚手架是模拟的请求，所以请按实际业务进行配置。\n\n### 响应数据的规范\n\n拿登陆成功的例子来讲，json 数据结构应如下：\n\n``` json\n{\n    "statusCode": 200,\n    "message": "登陆成功",\n    "data": {\n        "userName": "Yanglinen",\n        "token": "qwertyuiopasdfghjklzxcvbnm"\n    }\n}\n```\n\n可参考 `public/static/res/` 文件夹下的 json 文件。\n\n|字段|类型|必须|备注|\n|-|-|-|-|\n|statusCode|整形|是|api 结果状态码|\n|message|字符串|否|api 结果描述，可返回一些提示信息|\n|data|JSONObject|否|api 业务数据包，根据实际业务进行返回|\n\n\n'}})],1):n._e()},a=[],r=t("bce4"),s={name:"apiguifanView",components:{vel_md_editor:r["a"]}},i=s,c=t("b709"),l=Object(c["a"])(i,o,a,!1,null,"6299da70",null);e["default"]=l.exports},faf5:function(n,e,t){"use strict";t.r(e);var o=function(){var n=this,e=n.$createElement,t=n._self._c||e;return n.refresh?t("el-card",{staticClass:"box-card",attrs:{shadow:"never","body-style":{padding:"15px",height:"calc(100vh - 152px)"}}},[t("el-form",[t("el-form-item",[t("el-button",{attrs:{type:"success",icon:"el-icon-edit"},on:{click:n.save}},[n._v("保存")])],1)],1),t("vel_md_editor",{attrs:{type:"edit",height:"calc(100vh - 212px)",content:'\n### vel_md_editor\nmavon-editor 编辑器，这里简单进行了封装，屏蔽了工具栏的配置，修改了些样式，提供 edit 和 preview 两种模式和一个 change 事件。图片上传要自己搞，这个组件可以拿来即用。\n\n### 展示\n\n前面的文档都是在这里编辑的，然后复制了 makdown 文本，再粘贴到 preview 模式下的。\n\n![](/static/imgs/logo.png)\n\n**粗体**\n\n*斜体*\n\n++下划线++\n\n~~中划线~~\n\n==标记==\n\n<font color=red>颜色，这个是html了</font>\n\n文本^上角标^\n\n文本~下角标~\n\n::: hljs-left\n居左\n:::\n\n::: hljs-center\n居中\n:::\n\n::: hljs-right\n居右\n:::\n\n> 段落引用\n\n1. 啦啦啦啦\n2. 啦啦啦啦啦啦\n3. 啦啦啦啦啦\n\n- 啦啦啦啦啦啦啦啦\n- 啦啦啦啦啦啦啦啦啦啦啦啦啦\n- 啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦啦\n\n\n``` js\nfunction fun(){\n    alert("123")\n}\n```\n\n|column1|column2|column3|\n|-|-|-|\n|content1|content2|content3|\n|content1|content2|content3|\n|content1|content2|content3|\n\n\n$$Cos(X,Y) = \\dfrac{X \\bullet Y}{\\Vert X \\Vert^2 \\Vert Y \\Vert^2}$$\n\n\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n\n'},on:{change:n.change}})],1):n._e()},a=[],r=t("bce4"),s={name:"markdownView",components:{vel_md_editor:r["a"]},data:function(){return{value:"",render:""}},methods:{change:function(n,e){this.value=n,this.render=e},save:function(){this.$message.warning("内容获取，请打开控制台查看！"),console.log("%cMarkdown文本内容：","color:blue;font-weight:700;font-size:14px","\r"+this.value),console.log("%cHtml文本内容：","color:blue;font-weight:700;font-size:14px","\n"+this.render)}}},i=s,c=t("b709"),l=Object(c["a"])(i,o,a,!1,null,"2351c875",null);e["default"]=l.exports}}]);
//# sourceMappingURL=chunk-0ca446e8.1648bada.js.map